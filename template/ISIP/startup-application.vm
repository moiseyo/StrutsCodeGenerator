##
##  Copyright(C) 2006 Sprint Inc
##
##  This library is free software; you can redistribute it and/or
##  modify it under the terms of the GNU Lesser General Public
##  License as published by the Free Software Foundation; either
##  version 2.1 of the License, or (at your option) any later version.
##
##  This library is distributed in the hope that it will be useful,
##  but WITHOUT ANY WARRANTY; without even the implied warranty of
##  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
##  Lesser General Public License for more details.
##
##  You should have received a copy of the GNU Lesser General Public
##  License along with this library; if not, write to the Free Software
##  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
##
//---------------------------------------------------------
// Application: $property.Name
// Author     : $property.Author
// File       : StartUp.java	
//
// Copyright $year $property.Company
// Created at $date.Time

package ${build.Package}.plugin;

import javax.servlet.*;
import javax.sql.*;

import org.apache.struts.*; 
import org.apache.struts.action.*;
import org.apache.struts.config.*;

import ${build.Package}.dao.*;

public class StartUp implements PlugIn {

  public void init(ApplicationConfig config) {
    ServletContext context = config.getServlet().getServletContext();
    DataSource ds = (DataSource) context.getAttribute(Globals.DATA_SOURCE_KEY); 
#foreach($reference in $globalReference)
#if($reference.Scope == "application")
    try {
      ${reference.BeanName}DAO $util.firstLower(${reference.BeanName})DAO = new ${reference.BeanName}DAO(ds);
#if(${reference.QueryName} == "SearchByPK")
      context.setAttribute("$reference.Name", $util.firstLower(${reference.BeanName})DAO.retrieve($formatter.formatArray($reference.Param)));
#else
      context.setAttribute("$reference.Name", $util.firstLower(${reference.BeanName})DAO.${reference.QueryName}($formatter.formatArray($reference.Param)));
#end
    } catch (Exception e) {
      e.printStackTrace();
    }
#end
#end
  }

  public void destroy() {
#foreach($reference in $globalReference)
#if($reference.Scope == "application")
    context.setAttribute("$reference.Name", null);
#end
#end
  }
}
