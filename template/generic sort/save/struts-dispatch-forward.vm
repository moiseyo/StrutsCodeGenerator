##
##  Copyright(C) 2006 Sprint
##
##  This library is free software; you can redistribute it and/or
##  modify it under the terms of the GNU Lesser General Public
##  License as published by the Free Software Foundation; either
##  version 2.1 of the License, or (at your option) any later version.
##
##  This library is distributed in the hope that it will be useful,
##  but WITHOUT ANY WARRANTY; without even the implied warranty of
##  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
##  Lesser General Public License for more details.
##
##  You should have received a copy of the GNU Lesser General Public
##  License along with this library; if not, write to the Free Software
##  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
##
//---------------------------------------------------------
// Application: $property.Name
// Author     : $property.Author
// File       : DispatchForward.java
//
// Copyright $year $property.Company
// Created at $date.Time
// 
//---------------------------------------------------------

package ${build.Package}.controller;

import org.apache.struts.action.*;
import ${build.Package}.util.*;
import org.apache.commons.beanutils.ConvertUtils;
import javax.servlet.http.*;

public final class DispatchForward extends Action {

  static {
    DateBeanUtilsConverter dateConverter = new DateBeanUtilsConverter();
    dateConverter.setFormatPattern("${dateFormat}");
    StringBeanUtilsConverterDate myStringConverter = new StringBeanUtilsConverterDate();
    myStringConverter.setFormatPattern("${dateFormat}");
    ConvertUtils.register(dateConverter, java.util.Date.class);
    ConvertUtils.register(myStringConverter, String.class);
  }

  /**
   *  Forward request to "cancel", {forward}, or "error" mapping, where
   *  {forward} is an action path given in the parameter mapping or in the
   *  request as "forward=actionPath".
   *
   *@param  mapping   The ActionMapping used to select this instance
   *@param  request   The HTTP request we are processing
   *@param  response  The HTTP response we are creating
   *@param  form      Description of Parameter
   *@return           Description of the Returned Value
   */
  public ActionForward execute(ActionMapping mapping,
      ActionForm form,
      HttpServletRequest request,
      HttpServletResponse response) {

    // -- isCancelled?
    if (isCancelled(request)) {
      form.reset(mapping, request);
      return (mapping.findForward("cancel"));
    }

    // -- Locals
    ActionForward thisForward = null;
    String wantForward = null;

    // -- Check internal parameter for forward
    wantForward = mapping.getParameter();

    // -- If not found, check request for forward
    if (wantForward == null) {
      wantForward = request.getParameter("forward");
    }

    // -- If found, consult mappings
    if (wantForward != null) {
      thisForward = mapping.findForward(wantForward);
    }

    // -- If anything not found, dispatch error
    if (thisForward == null) {
      thisForward = mapping.findForward("error");
      ActionErrors errors = new ActionErrors();
      errors.add(ActionErrors.GLOBAL_ERROR,
          new ActionError("action.missing.parameter"));
      saveErrors(request, errors);
    }

    return thisForward;
  }
  // end perform

}
// end Action

